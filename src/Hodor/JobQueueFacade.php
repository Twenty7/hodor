<?php

namespace Hodor;

use Hodor\Config\LoaderFactory;

class JobQueueFacade
{
    /**
     * @var string
     */
    private static $config_file;

    /**
     * @var \Hodor\Config\LoaderFactory
     */
    private static $config;

    /**
     * @var \Hodor\BufferQueue
     */
    private static $buffer_queue;

    /**
     * @param string $name the name of the job to run
     * @param array $params the parameters to pass to the job
     * @param array $options the options to use when running the job
     */
    public static function push($name, array $params = [], array $options = [])
    {
        self::getBufferQueue()->push(
            $name,
            $params,
            $options
        );
    }

    /**
     * @param string $config_file
     */
    public static function setConfigFile($config_file)
    {
        self::$config_file = $config_file;
    }

    /**
     * @return \Hodor\Config
     */
    public static function getConfig()
    {
        if (self::$config) {
            return self::$config;
        }

        if (self::$config_file) {
            $config_loader_factory = new LoaderFactory();
            self::$config = $config_loader_factory->loadFromFile(self::$config_file);
        } else {
            throw new Exception(
                "Config could not be found or generated by JobQueueFacade."
            );
        }

        return self::$config;
    }

    /**
     * @param \Hodor\BufferQueue $buffer_queue [description]
     */
    public static function setBufferQueue(BufferQueue $buffer_queue)
    {
        self::$buffer_queue = $buffer_queue;
    }

    /**
     * @return \Hodor\BufferQueue
     */
    private static function getBufferQueue()
    {
        if (self::$buffer_queue) {
            return self::$buffer_queue;
        }

        self::$buffer_queue = new BufferQueue();

        return self::$buffer_queue;
    }
}
